// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLE.Data;

#nullable disable

namespace NLE.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230912124116_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NLE.Domain.Entities.Access", b =>
                {
                    b.Property<Guid>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HttpMethodId")
                        .HasColumnType("int");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Referer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SentTo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccessId");

                    b.HasIndex("ClientId");

                    b.HasIndex("HostId");

                    b.HasIndex("HttpMethodId");

                    b.ToTable("Accesses");
                });

            modelBuilder.Entity("NLE.Domain.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            Name = "Not defined"
                        },
                        new
                        {
                            ClientId = 2,
                            Name = "Chrome"
                        },
                        new
                        {
                            ClientId = 3,
                            Name = "Safari"
                        },
                        new
                        {
                            ClientId = 4,
                            Name = "Edge"
                        },
                        new
                        {
                            ClientId = 5,
                            Name = "Firefox"
                        });
                });

            modelBuilder.Entity("NLE.Domain.Entities.FileLog", b =>
                {
                    b.Property<Guid>("FileLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastLine")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FileLogId");

                    b.ToTable("FileLogs");
                });

            modelBuilder.Entity("NLE.Domain.Entities.Host", b =>
                {
                    b.Property<Guid>("HostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("HostId");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("NLE.Domain.Entities.HttpMethod", b =>
                {
                    b.Property<int>("HttpMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HttpMethodId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("HttpMethodId");

                    b.ToTable("HttpMethods");

                    b.HasData(
                        new
                        {
                            HttpMethodId = 1,
                            Name = "HEAD"
                        },
                        new
                        {
                            HttpMethodId = 2,
                            Name = "OPTIONS"
                        },
                        new
                        {
                            HttpMethodId = 3,
                            Name = "GET"
                        },
                        new
                        {
                            HttpMethodId = 4,
                            Name = "POST"
                        },
                        new
                        {
                            HttpMethodId = 5,
                            Name = "PUT"
                        },
                        new
                        {
                            HttpMethodId = 6,
                            Name = "DELETE"
                        });
                });

            modelBuilder.Entity("NLE.Domain.Entities.Access", b =>
                {
                    b.HasOne("NLE.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("NLE.Domain.Entities.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLE.Domain.Entities.HttpMethod", "HttpMethod")
                        .WithMany()
                        .HasForeignKey("HttpMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Host");

                    b.Navigation("HttpMethod");
                });
#pragma warning restore 612, 618
        }
    }
}
